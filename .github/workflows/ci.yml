---

name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  e2e:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: llibres-test
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: diesel_cli

      - name: Prepare database
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost/llibres-test
        run: |
          diesel setup

      - name: Cypress run
        uses: cypress-io/github-action@v2
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost/llibres-test
        with:
          start: cargo run
          wait-on: 'http://localhost:8080/health'
          wait-on-timeout: 600
          command: yarn test:e2e --headless

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14

    - name: Lint
      run: |
        yarn
        yarn lint

  image:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2

      - name: Build production Docker image
        run: |
          docker build -f Dockerfile --tag ${{ secrets.REGISTRY_HOST }}/${{ secrets.REGISTRY_USERNAME }}/llibres:main .
          docker save ${{ secrets.REGISTRY_HOST }}/${{ secrets.REGISTRY_USERNAME }}/llibres:main | gzip > ci.tar.gz

      - name: Backup Docker image
        uses: actions/upload-artifact@v2
        with:
          name: ci-docker-image
          path: ci.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: [check, clippy, fmt, lint, e2e, image]
    if: github.event_name == 'push'
    steps:
      # We need this for the .trivyignore file. This takes ~2s, so it shouldn't be too bad.
      - uses: actions/checkout@v2

      - name: Download Docker image
        uses: actions/download-artifact@v2
        with:
          name: ci-docker-image

      - name: Restore Docker image
        run: |
          docker load < ci.tar.gz

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.REGISTRY_HOST }}/${{ secrets.REGISTRY_USERNAME }}/llibres:main'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true

      - name: Push Docker image
        run: |
          # The login is done with the default docker password storage, which is
          # not the safest around, but it will be removed by a subsequent logout
          # later on.
          docker login -u "${{ secrets.REGISTRY_USERNAME }}" -p "${{ secrets.REGISTRY_PASSWORD }}" ${{ secrets.REGISTRY_HOST }}
          docker push ${{ secrets.REGISTRY_HOST }}/${{ secrets.REGISTRY_USERNAME }}/llibres:main
          docker logout ${{ secrets.REGISTRY_HOST }}
